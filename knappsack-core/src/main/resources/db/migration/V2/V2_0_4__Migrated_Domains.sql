--
-- Table structure for table `DOMAIN`
--

DROP TABLE IF EXISTS `DOMAIN`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `DOMAIN` (
  `ID` bigint(20) NOT NULL AUTO_INCREMENT,
  `OLD_ID` bigint(29) NOT NULL,
  `DOMAIN_TYPE` varchar(31) DEFAULT NULL,
  `ACCESS_CODE` varchar(255) DEFAULT NULL,
  `CHANGED_BY` varchar(255) DEFAULT NULL,
  `CREATE_DATE` date DEFAULT NULL,
  `LAST_UPDATE` date DEFAULT NULL,
  `NAME` varchar(255) NOT NULL,
  `UUID` varchar(255) NOT NULL,
  `VERSION` int(11) DEFAULT NULL,
  `DOMAINCONFIGURATION_ID` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE KEY `UUID` (`UUID`),
  KEY `FK_DOMAIN_DOMAINCONFIGURATION_ID` (`DOMAINCONFIGURATION_ID`),
  CONSTRAINT `FK_DOMAIN_DOMAINCONFIGURATION_ID` FOREIGN KEY (`DOMAINCONFIGURATION_ID`) REFERENCES `DOMAIN_CONFIGURATION` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `DOMAIN`
--

LOCK TABLES `DOMAIN` WRITE;
/*!40000 ALTER TABLE `DOMAIN` DISABLE KEYS */;
/*!40000 ALTER TABLE `DOMAIN` ENABLE KEYS */;
UNLOCK TABLES;

INSERT INTO `DOMAIN` (`OLD_ID`, `DOMAIN_TYPE`, `ACCESS_CODE`, `CHANGED_BY`, `CREATE_DATE`, `LAST_UPDATE`, `NAME`, `UUID`, `VERSION`, `DOMAINCONFIGURATION_ID`)
SELECT `ID` AS `OLD_ID`, `DOMAIN_TYPE`, `ACCESS_CODE`, `CHANGED_BY`, `CREATE_DATE`, `LAST_UPDATE`, `NAME`, `UUID`, `VERSION`, `DOMAINCONFIGURATION_ID` FROM `ORGANIZATION`;

INSERT INTO `DOMAIN` (`OLD_ID`, `DOMAIN_TYPE`, `ACCESS_CODE`, `CHANGED_BY`, `CREATE_DATE`, `LAST_UPDATE`, `NAME`, `UUID`, `VERSION`, `DOMAINCONFIGURATION_ID`)
SELECT `ID` AS `OLD_ID`, `DOMAIN_TYPE`, `ACCESS_CODE`, `CHANGED_BY`, `CREATE_DATE`, `LAST_UPDATE`, `NAME`, `UUID`, `VERSION`, `DOMAINCONFIGURATION_ID` FROM `ORG_GROUP`;

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS `ORGANIZATION`;
SET foreign_key_checks = 1;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ORGANIZATION` (
  `ID` bigint(20) NOT NULL,
  PRIMARY KEY (`ID`),
  CONSTRAINT `FK_ORGANIZATION_ID` FOREIGN KEY (`ID`) REFERENCES `DOMAIN` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;


INSERT INTO `ORGANIZATION` (`ID`) SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`DOMAIN_TYPE` = 'ORGANIZATION';

DELIMITER $$

DROP PROCEDURE IF EXISTS `drop_fk_if_exists` $$
CREATE PROCEDURE `drop_fk_if_exists` (
IN param_table_name VARCHAR(100),
IN param_key_name VARCHAR(100)
)
BEGIN
-- Verify the foreign key exists
IF EXISTS (SELECT NULL FROM information_schema.TABLE_CONSTRAINTS WHERE CONSTRAINT_SCHEMA = DATABASE() AND CONSTRAINT_NAME = param_key_name) THEN
-- Turn the parameters into local variables
set @ParamTable = param_table_name ;
set @ParamKey = param_key_name ;
-- Create the full statement to execute
set @StatementToExecute = concat('ALTER TABLE ',@ParamTable,' DROP FOREIGN KEY ',@ParamKey);
-- Prepare and execute the statement that was built
prepare DynamicStatement from @StatementToExecute ;
execute DynamicStatement ;
-- Cleanup the prepared statement
deallocate prepare DynamicStatement ;
END IF;
END $$

DELIMITER ;

UPDATE `ORG_STORAGE_CONFIG`
SET
    `ORGANIZATION_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `ORG_STORAGE_CONFIG`.`ORGANIZATION_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = 'ORGANIZATION');

SET FOREIGN_KEY_CHECKS = 0;
CALL drop_fk_if_exists('ORG_STORAGE_CONFIG', 'FK_ORG_STORAGE_CONFIG_ORGANIZATION_ID');
ALTER TABLE `ORG_STORAGE_CONFIG` ADD CONSTRAINT `FK_ORG_STORAGE_CONFIG_ORGANIZATION_ID` FOREIGN KEY (`ORGANIZATION_ID`) REFERENCES `ORGANIZATION` (`ID`);
SET FOREIGN_KEY_CHECKS = 1;

UPDATE `CUSTOMER`
SET
    `ORGANIZATION_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `CUSTOMER`.`ORGANIZATION_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = 'ORGANIZATION');

SET FOREIGN_KEY_CHECKS = 0;
CALL drop_fk_if_exists('CUSTOMER', 'FK_CUSTOMER_ORGANIZATION_ID');
ALTER TABLE `CUSTOMER` ADD CONSTRAINT `FK_CUSTOMER_ORGANIZATION_ID` FOREIGN KEY (`ORGANIZATION_ID`) REFERENCES `ORGANIZATION` (`ID`);
SET FOREIGN_KEY_CHECKS = 1;

UPDATE `CATEGORY`
SET
	`ORGANIZATION_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `CATEGORY`.`ORGANIZATION_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = 'ORGANIZATION');

SET FOREIGN_KEY_CHECKS = 0;
CALL drop_fk_if_exists('CATEGORY', 'FK_CATEGORY_ORGANIZATION_ID');
ALTER TABLE `CATEGORY` ADD CONSTRAINT `FK_CATEGORY_ORGANIZATION_ID` FOREIGN KEY (`ORGANIZATION_ID`) REFERENCES `ORGANIZATION` (`ID`);
SET FOREIGN_KEY_CHECKS = 1;


CREATE TEMPORARY TABLE `TMP_ORG_GROUP` (
  `ID` bigint(20) NOT NULL,
  `ORGANIZATION_ID` bigint(20) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `TMP_ORG_GROUP` (`ID`, `ORGANIZATION_ID`)
SELECT
    `DOMAIN`.`ID`, `ORG_GROUP`.`ORGANIZATION_ID`
FROM
    `ORG_GROUP`
        INNER JOIN
    `DOMAIN` ON `DOMAIN`.`OLD_ID` = `ORG_GROUP`.`ID`
WHERE
    `DOMAIN`.`DOMAIN_TYPE` = 'GROUP';

UPDATE `TMP_ORG_GROUP`
SET
	`ORGANIZATION_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `TMP_ORG_GROUP`.`ORGANIZATION_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = 'ORGANIZATION');

SET foreign_key_checks = 0;
DROP TABLE IF EXISTS `ORG_GROUP`;
SET foreign_key_checks = 1;

CREATE TABLE `ORG_GROUP` (
  `ID` bigint(20) NOT NULL,
  `ORGANIZATION_ID` bigint(20) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_ORG_GROUP_ORGANIZATION_ID` (`ORGANIZATION_ID`),
  CONSTRAINT `FK_ORG_GROUP_ID` FOREIGN KEY (`ID`) REFERENCES `DOMAIN` (`ID`),
  CONSTRAINT `FK_ORG_GROUP_ORGANIZATION_ID` FOREIGN KEY (`ORGANIZATION_ID`) REFERENCES `ORGANIZATION` (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `ORG_GROUP` (`ID`, `ORGANIZATION_ID`)
SELECT
    `ID`, `ORGANIZATION_ID` FROM `TMP_ORG_GROUP`;

DROP TABLE IF EXISTS `TMP_ORG_GROUP`;

UPDATE `GROUP_USER_REQUEST`
SET
	`ORG_GROUP_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `GROUP_USER_REQUEST`.`ORG_GROUP_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = 'GROUP');

SET FOREIGN_KEY_CHECKS = 0;
CALL drop_fk_if_exists('GROUP_USER_REQUEST', 'FK_GROUP_USER_REQUEST_ORG_GROUP_ID');
ALTER TABLE `GROUP_USER_REQUEST` ADD CONSTRAINT `FK_GROUP_USER_REQUEST_ORG_GROUP_ID` FOREIGN KEY (`ORG_GROUP_ID`) REFERENCES `ORG_GROUP` (`ID`);
SET FOREIGN_KEY_CHECKS = 1;

UPDATE `ORG_GROUP_APPLICATION`
SET
	`ORG_GROUP_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `ORG_GROUP_APPLICATION`.`ORG_GROUP_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = 'GROUP');

SET FOREIGN_KEY_CHECKS = 0;
CALL drop_fk_if_exists('ORG_GROUP_APPLICATION', 'FK_ORG_GROUP_APPLICATION_ORG_GROUP_ID');
ALTER TABLE `ORG_GROUP_APPLICATION` ADD CONSTRAINT `FK_ORG_GROUP_APPLICATION_ORG_GROUP_ID` FOREIGN KEY (`ORG_GROUP_ID`) REFERENCES `ORG_GROUP` (`ID`);
SET FOREIGN_KEY_CHECKS = 1;

UPDATE `ORG_GROUP_GUEST_APPLICATION_VERSION`
SET
	`ORG_GROUP_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `ORG_GROUP_GUEST_APPLICATION_VERSION`.`ORG_GROUP_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = 'GROUP');

SET FOREIGN_KEY_CHECKS = 0;
CALL drop_fk_if_exists('ORG_GROUP_GUEST_APPLICATION_VERSION', 'ORG_GROUP_GUEST_APPLICATION_VERSION_ORG_GROUP_ID');
ALTER TABLE `ORG_GROUP_GUEST_APPLICATION_VERSION` ADD CONSTRAINT `ORG_GROUP_GUEST_APPLICATION_VERSION_ORG_GROUP_ID` FOREIGN KEY (`ORG_GROUP_ID`) REFERENCES `ORG_GROUP` (`ID`);
SET FOREIGN_KEY_CHECKS = 1;

UPDATE `INVITATION`
SET
    `DOMAIN_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `INVITATION`.`DOMAIN_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = `INVITATION`.`DOMAIN_TYPE`);

ALTER TABLE `USER_DOMAIN` DROP INDEX `UNQ_USER_DOMAIN_0`;
UPDATE `USER_DOMAIN`
SET
    `DOMAIN_ID` = (SELECT
            `ID`
        FROM
            `DOMAIN`
        WHERE
            `DOMAIN`.`OLD_ID` = `USER_DOMAIN`.`DOMAIN_ID`
                AND `DOMAIN`.`DOMAIN_TYPE` = `USER_DOMAIN`.`DOMAIN_TYPE`);
ALTER TABLE `USER_DOMAIN` ADD UNIQUE `UNQ_USER_DOMAIN_0` (`DOMAIN_TYPE`,`DOMAIN_ID`,`ROLE_ID`,`USER_ID`);

ALTER TABLE `DOMAIN` DROP COLUMN `OLD_ID`;